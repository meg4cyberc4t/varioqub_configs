// Copyright 2024 Igor Molchanov. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonBuildSettings {
  var clientId: String
  var clientFeatures: [String?: String?]
  var logs: Bool? = nil
  var activateEvent: Bool

  static func fromList(_ list: [Any?]) -> PigeonBuildSettings? {
    let clientId = list[0] as! String
    let clientFeatures = list[1] as! [String?: String?]
    let logs: Bool? = nilOrValue(list[2])
    let activateEvent = list[3] as! Bool

    return PigeonBuildSettings(
      clientId: clientId,
      clientFeatures: clientFeatures,
      logs: logs,
      activateEvent: activateEvent
    )
  }
  func toList() -> [Any?] {
    return [
      clientId,
      clientFeatures,
      logs,
      activateEvent,
    ]
  }
}

private class VarioqubSenderCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return PigeonBuildSettings.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class VarioqubSenderCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PigeonBuildSettings {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class VarioqubSenderCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return VarioqubSenderCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return VarioqubSenderCodecWriter(data: data)
  }
}

class VarioqubSenderCodec: FlutterStandardMessageCodec {
  static let shared = VarioqubSenderCodec(readerWriter: VarioqubSenderCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol VarioqubSender {
  func build(settings: PigeonBuildSettings) throws
  func getDeviceId() throws -> String
  func updateDeviceId(value: String) throws
  func getUserId() throws -> String
  func updateUserId(value: String) throws
  func fetchConfig(completion: @escaping (Result<Void, Error>) -> Void)
  func activateConfig(completion: @escaping (Result<Void, Error>) -> Void)
  func setDefaults(values: [String: Any]) throws
  func getString(key: String, defaultValue: String) throws -> String
  func getBool(key: String, defaultValue: Bool) throws -> Bool
  func getInt(key: String, defaultValue: Int64) throws -> Int64
  func getDouble(key: String, defaultValue: Double) throws -> Double
  func getId() throws -> String
  func putClientFeature(key: String, value: String) throws
  func clearClientFeatures() throws
  func getAllKeys() throws -> [String]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class VarioqubSenderSetup {
  /// The codec used by VarioqubSender.
  static var codec: FlutterStandardMessageCodec { VarioqubSenderCodec.shared }
  /// Sets up an instance of `VarioqubSender` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: VarioqubSender?) {
    let buildChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.build", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      buildChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let settingsArg = args[0] as! PigeonBuildSettings
        do {
          try api.build(settings: settingsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      buildChannel.setMessageHandler(nil)
    }
    let getDeviceIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.getDeviceId", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDeviceIdChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getDeviceId()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getDeviceIdChannel.setMessageHandler(nil)
    }
    let updateDeviceIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.updateDeviceId", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateDeviceIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! String
        do {
          try api.updateDeviceId(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updateDeviceIdChannel.setMessageHandler(nil)
    }
    let getUserIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.getUserId", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserIdChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getUserId()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getUserIdChannel.setMessageHandler(nil)
    }
    let updateUserIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.updateUserId", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateUserIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! String
        do {
          try api.updateUserId(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updateUserIdChannel.setMessageHandler(nil)
    }
    let fetchConfigChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.fetchConfig", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchConfigChannel.setMessageHandler { _, reply in
        api.fetchConfig { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      fetchConfigChannel.setMessageHandler(nil)
    }
    let activateConfigChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.activateConfig", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      activateConfigChannel.setMessageHandler { _, reply in
        api.activateConfig { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      activateConfigChannel.setMessageHandler(nil)
    }
    let setDefaultsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.setDefaults", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDefaultsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valuesArg = args[0] as! [String: Any]
        do {
          try api.setDefaults(values: valuesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDefaultsChannel.setMessageHandler(nil)
    }
    let getStringChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.getString", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let defaultValueArg = args[1] as! String
        do {
          let result = try api.getString(key: keyArg, defaultValue: defaultValueArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getStringChannel.setMessageHandler(nil)
    }
    let getBoolChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.getBool", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getBoolChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let defaultValueArg = args[1] as! Bool
        do {
          let result = try api.getBool(key: keyArg, defaultValue: defaultValueArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getBoolChannel.setMessageHandler(nil)
    }
    let getIntChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.getInt", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIntChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let defaultValueArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        do {
          let result = try api.getInt(key: keyArg, defaultValue: defaultValueArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIntChannel.setMessageHandler(nil)
    }
    let getDoubleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.getDouble", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDoubleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let defaultValueArg = args[1] as! Double
        do {
          let result = try api.getDouble(key: keyArg, defaultValue: defaultValueArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getDoubleChannel.setMessageHandler(nil)
    }
    let getIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.getId", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIdChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getId()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIdChannel.setMessageHandler(nil)
    }
    let putClientFeatureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.putClientFeature", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      putClientFeatureChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let valueArg = args[1] as! String
        do {
          try api.putClientFeature(key: keyArg, value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      putClientFeatureChannel.setMessageHandler(nil)
    }
    let clearClientFeaturesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.clearClientFeatures", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearClientFeaturesChannel.setMessageHandler { _, reply in
        do {
          try api.clearClientFeatures()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearClientFeaturesChannel.setMessageHandler(nil)
    }
    let getAllKeysChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.varioqub_configs.VarioqubSender.getAllKeys", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAllKeysChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAllKeys()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAllKeysChannel.setMessageHandler(nil)
    }
  }
}
